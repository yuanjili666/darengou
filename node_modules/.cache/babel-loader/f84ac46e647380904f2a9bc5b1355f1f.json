{"ast":null,"code":"var _jsxFileName = \"C:\\\\js1912\\\\03-react\\\\\\u8FBE\\u4EBA\\u8D2D\\u7269\\u9759\\u6001\\u9875\\u9762\\\\drg\\\\react-bk1912-2\\\\src\\\\utils\\\\renderRoutes.js\";\nimport React, { Fragment } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Layout from \"../layout\";\nimport Cookies from \"js-cookie\";\nexport default (routes => {\n  const eachRoutes = route => {\n    return React.createElement(Route, {\n      key: route.key,\n      path: route.path,\n      render: props => React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(Route, {\n        component: route.component,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }), React.createElement(Redirect, {\n        to: route.children[0].path,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }), React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, route.children.map(child => {\n        if (child.children) {\n          return eachRoutes(child);\n        }\n\n        if (!route.meta.requireAuth || Cookies.get('token') || route.path === \"/login\") {\n          return React.createElement(Layout, Object.assign({}, child, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }), React.createElement(Route, Object.assign({\n            path: child.path,\n            key: child.key,\n            component: child.component\n          }, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          })));\n        } else {\n          return React.createElement(Redirect, {\n            to: {\n              pathname: \"/login\",\n              state: {\n                from: child.path\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          });\n        }\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    });\n  };\n\n  return routes.map(route => {\n    if (route.children) {\n      return eachRoutes(route);\n    } else {\n      return React.createElement(Route, {\n        path: route.path,\n        key: route.key,\n        render: props => {\n          if (!route.meta.requireAuth || Cookies.get('token') || route.path === \"/login\") {\n            return React.createElement(Layout, Object.assign({}, route, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 52\n              },\n              __self: this\n            }), React.createElement(route.component, Object.assign({\n              key: route.key\n            }, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            })));\n          } else {\n            return React.createElement(Redirect, {\n              to: {\n                pathname: \"/login\",\n                state: {\n                  form: route.path\n                }\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }\n  });\n});","map":{"version":3,"sources":["C:\\js1912\\03-react\\达人购物静态页面\\drg\\react-bk1912-2\\src\\utils\\renderRoutes.js"],"names":["React","Fragment","Switch","Route","Redirect","Layout","Cookies","routes","eachRoutes","route","key","path","props","component","children","map","child","meta","requireAuth","get","pathname","state","from","form"],"mappings":"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","sourcesContent":["import React,{Fragment} from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Layout from \"../layout\"\r\nimport Cookies from \"js-cookie\"; \r\nexport default (routes) => {\r\n    const eachRoutes = (route) => {\r\n        return <Route\r\n            key={route.key}\r\n            path={route.path}\r\n            render={(props) => (\r\n                <Fragment>\r\n                <Route component={route.component}/>\r\n                <Redirect to={route.children[0].path} />\r\n\r\n                <Switch>\r\n              \r\n                    {\r\n                        route.children.map((child) => {\r\n                            if (child.children) {\r\n                                return eachRoutes(child)\r\n                            }\r\n                            if (!route.meta.requireAuth || Cookies.get('token') || route.path === \"/login\") {\r\n                           \r\n                                return <Layout {...child}>\r\n                                             <Route path={child.path} key={child.key} component={child.component}  {...props} />\r\n                                        </Layout>\r\n                                \r\n                                \r\n                              \r\n                            } else {\r\n                              \r\n                                return <Redirect to={{ pathname: \"/login\", state: { from:child.path } }} />\r\n                            }\r\n                        })\r\n                    }\r\n                </Switch>\r\n                </Fragment>\r\n            )}\r\n\r\n        />\r\n    }\r\n\r\n\r\n\r\n    \r\n    return routes.map((route) => {\r\n        if (route.children) {\r\n              return eachRoutes(route)  \r\n        } else {\r\n        return  <Route path={route.path} key={route.key} render={(props) => {\r\n                if (!route.meta.requireAuth || Cookies.get('token') || route.path === \"/login\") {\r\n                    return <Layout {...route}>\r\n                              <route.component key={route.key} {...props}/>\r\n                            </Layout>\r\n                    \r\n                   \r\n                } else {\r\n                    return <Redirect to={{ pathname: \"/login\", state: { form: route.path } }} />\r\n                }\r\n\r\n            }} />\r\n        }\r\n    })\r\n\r\n}"]},"metadata":{},"sourceType":"module"}